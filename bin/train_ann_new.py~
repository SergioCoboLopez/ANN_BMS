# Train neural networks with pyrenn to predict ANN-generated functions
import pyrenn
import numpy as np
import pandas as pd
import pickle
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import seaborn as sns
import matplotlib.gridspec as gridspec
from sklearn.metrics import mean_squared_error
from sklearn.metrics import root_mean_squared_error
from sklearn.metrics import mean_absolute_error


#Read data
#-----------------------------------------------------
noise=True
activation_function='leaky_ReLU'


if noise==True:
    filename='NN_noisy_signal_' + activation_function + '.csv'
else:
    filename='NN_function_' + activation_function + '_NREP_10_data.csv'

data='../data/' + filename

d=pd.read_csv(data)
d=d.drop(columns='Unnamed: 0')

#print(d)
d=d[(d['x1'] >= -2.0) & (d['x1']<=2.0)]
d=d.reset_index(drop=True)
print(d[d['rep']==0])
#-----------------------------------------------------

#Build ANN
ILS = 1;OLS=1
NL, LS = 5, 10
arch=[ILS] + NL*[LS] + [OLS]
nn=pyrenn.CreateNN(arch)

#Empty dataframe for NN weights
#d_weights = pd.DataFrame()

#Train
train_size=50
validation_size=train_size + 10
n_functions=int(d['rep'].max())
#~~~~~~~~~~~~~~~
n_functions=9
print(n_functions)
#~~~~~~~~~~~~~~~

for n in range(n_functions + 1):    
    #Read data
    dn=d[d['rep']==n]
    dn.index.name = None
    dn=dn.reset_index(drop=True)
    
    #Train NN
    #Train on the  first points
    xtrain = dn.loc[0:train_size-1]['x1']
    ytrain = dn.loc[0:train_size-1]['y_noise']

    xvalid=dn.loc[train_size:validation_size-1]['x1']
    yvalid=dn.loc[train_size:validation_size-1]['y_noise']

    MAE=[];MSE=[]; RMSE=[]
    MAE_t=[];MSE_t=[]; RMSE_t=[]
    nn_dict={}
    for i in range(30):
        net=pyrenn.train_LM(xtrain,ytrain,nn,verbose=True,k_max=1,E_stop=1e-200)
        #Test NN
        yvalid_test = pyrenn.NNOut(xtrain,net)
        yvalid_pred = pyrenn.NNOut(xvalid,net)
#        print(yvalid)
#        print(yvalid_pred)

        #Validation errors
        #--------------------------------------------------
        MAE_i=mean_absolute_error(yvalid,yvalid_pred)
        MAE.append(MAE_i)

        MSE_i=mean_squared_error(yvalid,yvalid_pred)
        MSE.append(MSE_i)

        RMSE_i=root_mean_squared_error(yvalid,yvalid_pred)
        RMSE.append(RMSE_i)
        #--------------------------------------------------

        #Training errors
        #--------------------------------------------------
        MAE_t_i=mean_absolute_error(ytrain,yvalid_test)
        MAE_t.append(MAE_t_i)
        
        MSE_t_i=mean_squared_error(ytrain,yvalid_test)
        MSE_t.append(MSE_t_i)

        RMSE_t_i=root_mean_squared_error(ytrain,yvalid_test)
        RMSE_t.append(RMSE_t_i)
        #--------------------------------------------------
#        print(MAE)
        if i>1:
            
            # print(MAE[-1])
            # print(MAE[-2])
            # print(MAE[-3])
            if MAE[-1]>MAE[-2] and MAE[-1]>MAE[-3]:
                print(i)
                print("ya ta fechu")

            if MSE[-1]>MSE[-2] and MSE[-1]>MSE[-3]:
                print("entamien ta fechu")

        nn_dict[i]=nn
        nn=net

    plt.plot(MAE, '.', color='blue', label='MAE validation')
    plt.plot(MSE, '.', color='red',label='MSE validation')
    plt.plot(RMSE,'.', color='green',label='RMSE validation')


    plt.plot(MAE_t, linewidth=1,linestyle='--',color='blue',label='MAE train')
    plt.plot(MSE_t, linewidth=1,linestyle='--',color='red',label='MSE train')
    plt.plot(RMSE_t,linewidth=1,linestyle='--',color='green',label='RMSE train')
    plt.legend(loc='best')
    plt.show()
    
    #Save neural network
    if noise==True:
            pyrenn.saveNN(net,'../data/'+ 'NN_weights_TEST_noise_' + activation_function + '_train_' + str(train_size) + '_rep_' + str(n) + '.csv')
    else:
            pyrenn.saveNN(net,'../data/'+ 'NN_weights_TEST_' + activation_function + '_train_' + str(train_size) + '_rep_' + str(n) + '.csv')
    
    #Test NN
    xtest = dn.loc[train_size:]['x1']
    ytest = pyrenn.NNOut(xtrain,net)
    ypred = pyrenn.NNOut(xtest,net)

    #save results
    ymodel_n=np.concatenate((ytest, ypred))
    try:
        ymodel=np.append(ymodel,ymodel_n)
    except NameError:
        ymodel=ymodel_n


#Add predictions and save data
d['ymodel']=ymodel
if noise==True:
    d.to_csv('../data/'+ 'NN_model_TEST_noise_' + activation_function +  '_train_' + str(train_size) + '_NREP_10_data' + '.csv')
else:
    d.to_csv('../data/'+ 'NN_model_TEST_' + activation_function +  '_train_' + str(train_size) + \
         '_NREP_10_data' + '.csv')





