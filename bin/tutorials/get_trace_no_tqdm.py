#2025-02-05. This code builds BMS traces a complete dataset. The purpose is to generate a figure for a presentation
import sys
import pandas as pd
import numpy as np
from datetime import date

from copy import deepcopy
import warnings
from tqdm import tqdm

warnings.filterwarnings("ignore")
import os

#Set the current working directory in Python
os.chdir('/export/home/shared/Projects/ANN/Sergio/ANN_BMS/bin/tutorials')
# -------------------------------------------------------------------
# Command-line arguments
function='tanh';n=7;realization=2
sigma=0.0
runid=sys.argv[1]

#noise=True

NPAR = 10 #number of parameters of prior

# -------------------------------------------------------------------
# Read the data generated by ANNs
path_to_data='../../data/1x_resolution/'

d = pd.read_csv(path_to_data + 'NN_' + function + '_sigma_' + str(sigma) + '_r_' + str(realization) + '.csv')

#d=pd.read_csv('../../data/1x_resolution/NN_tanh_sigma_0.0_r_2.csv')
print(d)


output_path='../../data/MSTraces/'
filename='BMS_test_' + str(function) + '_n_' + str(n) + '_sigma_' + str(sigma) + '_r_' + str(realization) + '_id_' + str(runid)

d=d[d['rep']==n]
d=d[(d['x1'] >= -2.0) & (d['x1']<=2.0)]
d=d.reset_index(drop=True)


#Train set
train_size=80
d=d.loc[0:train_size-1]

# Instantiate a Tree from the desired string
X, y = d[['x1']], d['y_noise']
XLABS = list(X.columns)
print(d)
print(y)

# -------------------------------------------------------------------
# BMS
import sys
sys.path.append('../machine-scientist')
sys.path.append('../machine-scientist/Prior')
from mcmc import *
from parallel import *
from fit_prior import read_prior_par


# Choose and initialize priors and temperatures
prior_par = read_prior_par('../machine-scientist/Prior/final_prior_param_sq.named_equations.nv1.np10.2017-10-18 18:07:35.089658.dat')

# Set the temperatures for the parallel tempering
Ts = [1] + [1.04**k for k in range(1, 20)]

# REPEAT NREP TIMES
NSTEP = 50000

# Initialize the parallel machine scientist
pms = Parallel(
    Ts,
    variables=XLABS,
    parameters=['a%d' % i for i in range(8)],
    x=X, y=y,
    prior_par=prior_par,
)

description_lengths, mdl, mdl_model = [], np.inf, None



outf = open('../../data/MSTraces/'+ filename + '_trace_' + str(NSTEP) + '_prior_' + str(NPAR) + '.csv', 'w')
outf.close()

# MCMC
for i in tqdm(range(NSTEP)):
    # MCMC update
    pms.mcmc_step() # MCMC step within each T
    pms.tree_swap() # Attempt to swap two randomly selected consecutive temps
    # Add the description length to the trace
    description_lengths.append(pms.t1.E)

    outf = open('../../data/MSTraces/'+ filename + '_trace_' + str(NSTEP) + '_prior_' + str(NPAR) +  '.csv', 'a')
    print(
        ';'.join([
        str(kk) for kk in [i, pms.t1.E, pms.t1.pr(show_pow=True),
                               pms.t1.par_values, pms.t1.sse, pms.t1.bic, pms.t1.EP]
              ]),file=outf)
    
    outf.close()
    # Check if this is the MDL expression so far
    if pms.t1.E < mdl:
        mdl, mdl_model = pms.t1.E, deepcopy(pms.t1)
        

