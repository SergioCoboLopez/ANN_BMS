#3/2/2025. This code trains an nn with all the data points in a sample. The purpose is to generate a figure for a presentation

import pyrenn
import numpy as np
import copy
import pandas as pd
import pickle
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import sys
import seaborn as sns
import matplotlib.gridspec as gridspec
from sklearn.metrics import mean_squared_error
from sklearn.metrics import root_mean_squared_error
from sklearn.metrics import mean_absolute_error

function='tanh';n=7;realization=2
sigma=0.0

filename='NN_' + function + '_sigma_' + str(sigma) + '_r_' +str(realization) + '.csv'
data='../../data/1x_resolution/' + filename

train_size=80

d=pd.read_csv(data)
d=d.drop(columns='Unnamed: 0')
#Take subset of data    
d=d[(d['x1'] >= -2.0) & (d['x1']<=2.0)]
d=d.reset_index(drop=True)
#-----------------------------------------------------

#Build ANN  
ILS = 1;OLS=1
NL, LS = 5, 10
arch=[ILS] + NL*[LS] + [OLS]
nn=pyrenn.CreateNN(arch)

#Cross validations
train_border=d[d['rep']==0].loc[train_size-1]['x1']
iterations=300

dn=d[d['rep']==n]
dn.index.name = None
dn=dn.reset_index(drop=True)

#Train NN with all points                                                                        
xtrain = dn.loc[0:train_size-1]['x1']
ytrain = dn.loc[0:train_size-1]['y_noise']

net=pyrenn.train_LM(xtrain,ytrain,nn,verbose=True,k_max=100,E_stop=1e-5)

#Test NN on all points                                                                           
xtest = dn.loc[train_size:]['x1']
ytest = pyrenn.NNOut(xtrain,net)
ypred = pyrenn.NNOut(xtest,net)

print(ytest)
print(len(ytest))

#Add predictions and save data 
dn['ymodel']=ytest

#Save updated data with model                                                        
d.to_csv( output_path + 'NN_no_overfit_' + function + '_sigma_' + str(sigma) + '_r_'\
 + str(realization) + '.csv')

#Calculate error
rmse_nn=root_mean_squared_error(dn['ymodel'],dn['y'])

print(dn)

#Figure settings
#--------------------------------
data='../../data/tutorial/' + filename

'''
output_path='../../results/tutorial/' #A path to save figure
extensions=['.svg', '.png']     #Extensions to save figure

#Define figure size in cm
cm = 1/2.54 #convert inch to cm
width = 10*cm; height=9*cm 
fig=figure(figsize=(width,height), dpi=300) 
#Fonts and sizes                                                     
size_axis=16;size_ticks=12;size_title=5
line_w=1.5;marker_s=3
#figure parameters
xtick_labels=[-2, 0, 2 ]
ytick_labels=[ 0, 0.5, 1.0]
xmin=-2.04;xmax=2.04
ymin=-0.09;ymax=1.01
#--------------------------------

#Plots                                                               
#--------------------------------                                    
plt.plot(dn.x1,dn.y,'.', markersize=marker_s)
plt.plot(dn.x1,dn.ymodel, linewidth=line_w,color='red', label='ann. rmse= %.2E' %  ( rmse_nn) )

#Labels                                                              
plt.xlabel('x',fontsize=size_axis);plt.ylabel('y',fontsize=size_axis)
#Ticks                                                               
plt.xticks(xtick_labels, fontsize=size_ticks)
plt.yticks(ytick_labels, fontsize=size_ticks)

plt.xlim(xmin,xmax)
plt.ylim(ymin,ymax)

plt.legend(loc='best', fontsize=size_title)

sns.despine(top=True, right=True)
fig.tight_layout()

#save fig  
name_fig='overtrained_model'
for ext in extensions:
    plt.savefig(output_path+name_fig+ext,dpi=300)

plt.show()
#--------------------------------
'''
